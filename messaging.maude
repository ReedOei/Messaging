load socket
load file

fmod CLIENT-INFO is
    protecting STRING .
    protecting LEXICAL .
    protecting META-LEVEL .

    sorts Info ParsedInfo ParseResult .
    subsort Info < ParsedInfo .

    op account : String -> Info [ctor] .
    op account : Nat String -> Info [ctor] .
    op text : Nat String -> Info [ctor] .
    op allMessages : -> Info [ctor] .
    op replyTo : Nat Nat String -> Info [ctor] .
    op thread : Info Nat String -> Info [ctor] .
    op save : -> Info [ctor] .

    sort Message .
    subsort Message < Info .
    op message : Info Nat Info -> Message [ctor] .

    sort Infos .
    subsort Info < Infos .
    op mt : -> Infos [ctor] .
    op _;_ : Infos Infos -> Infos [ctor comm assoc id: mt] .

    op noInfo : -> ParsedInfo [ctor] .

    op [_,_] : ParsedInfo String -> ParseResult [ctor] .

    vars Str FullStr Pat : String .
    var Res : FindResult .
    vars N M : Nat .
    var C : Char .

    op findUnescaped : String String Nat -> FindResult .
    eq findUnescaped(Str, Pat, N) = $findUnescaped(find(Str, Pat, N), Str, Pat) .
    op $findUnescaped : FindResult String String -> FindResult .
    eq $findUnescaped(notFound, Str, Pat) = notFound .
    eq $findUnescaped(M, Str, Pat) =
        if escaped(Str, M) then
            $findUnescaped(find(Str, Pat, s(M)), Str, Pat)
        else
            M
        fi .

    op escaped : String Nat -> Bool .
    eq escaped(Str, 0) = false .
    eq escaped(Str, s(N)) = substr(Str, N, 1) == "\\" .

    op escape : String Char -> String .
    ceq escape(Str, C) = Str if notFound := find(Str, C, 0) .
    ceq escape(Str, C) = substr(Str, 0, N) + "\\" + C + escape(substr(Str, s(N), length(Str)), C)
        if N := find(Str, C, 0) .

    op escape : String -> String .
    eq escape(Str) = escape(escape(Str, "\\"), "\"") .

    op unescape : String -> String .
    ceq unescape(Str) = Str if notFound := find(Str, "\\", 0) .
    ceq unescape(Str) = substr(Str, 0, N) + substr(Str, s(N), 1) + unescape(substr(Str, s(s(N)), length(Str)))
        if N := find(Str, "\\", 0) .

    op parseInfo : String -> ParseResult .
    ceq parseInfo(FullStr) =
        extractInfo(metaParse(['CLIENT-INFO], tokenize(unescape(substr(Str, 0, N))), 'Info),
                    substr(Str, s(N), length(Str)),
                    Str)
        if M := findUnescaped(FullStr, "\"", 0) /\
           Str := substr(FullStr, s(M), length(FullStr)) /\
           N := findUnescaped(Str, "\"", 0) .
    eq parseInfo(Str) = [ noInfo, Str ] [owise] .

    op extractInfo : ResultPair String String -> ParseResult .
    ceq extractInfo({T:Term, Q:Qid}, Str, FullStr) = [ I:Info, Str ]
        if I:Info := downTerm(T:Term, noInfo) .
    ceq extractInfo({T:Term, Q:Qid}, Str, FullStr) = [ noInfo, FullStr ]
        if noInfo := downTerm(T:Term, noInfo) .
    eq extractInfo(noParse(N), Str, FullStr) = [ noInfo, FullStr ] .
endfm

mod MESSAGING is
    including SOCKET .
    including STD-STREAM .
    protecting NAT .
    protecting STRING .
    protecting LEXICAL .
    protecting META-LEVEL .
    protecting CONVERSION .
    protecting FILE .

    protecting CLIENT-INFO .

    op client : Nat -> Oid [ctor] .
    op Client : -> Cid [ctor] .

    op db : Nat -> Oid [ctor] .
    op Database : -> Cid [ctor] .

    op server : -> Oid [ctor] .
    op Server : -> Cid [ctor] .

    op info : Oid Nat Info -> Msg [ctor] .
    op receiveMessage : Oid Message -> Msg [ctor] .

    sort Queue .
    subsort Nat < Queue .
    op nq : -> Queue [ctor] .
    op _._ : Queue Queue -> Queue [ctor assoc id: nq] .

    sort Status .
    ops sending receiving idle : -> Status [ctor] .

    op messages :_ : Infos -> Attribute [ctor] .
    op accounts :_ : Infos -> Attribute [ctor] .
    op socket :_ : Oid -> Attribute [ctor] .
    op tick :_ : Nat -> Attribute [ctor] .
    op data :_ : String -> Attribute [ctor] .
    op account :_ : Info -> Attribute [ctor] .
    op msgQueue :_ : Queue -> Attribute [ctor] .
    op status :_ : Status -> Attribute [ctor] .
    op file :_ : Oid -> Attribute [ctor] .
    op serverState :_ : Object -> Attribute [ctor] .

    vars N M Tick Time Id : Nat .
    vars Msg1 Msg2 : Message .
    vars Ms1 Ms2 : Infos .
    vars Accs : Infos .
    vars S C C1 C2 File : Oid .
    vars Addr Name Text OldData Data NewData Data1 Data2 : String .
    vars Attrs Attrs1 Attrs2 : AttributeSet .
    vars Acc Acc1 Acc2 MsgInfo Parent : Info .
    vars Ns Ms : Queue .
    var Stat : Status .

    op startServer : Nat Nat -> Configuration .
    eq startServer(N, M) =
        <> --- "Portal" must be here.
        < server : Server | messages : mt, accounts : mt, msgQueue : nq, tick : 1 >
        createServerTcpSocket(socketManager, server, N, M) .

    rl < server : Server | Attrs >
       createdSocket(server, socketManager, S)
       => < server : Server | socket : S, Attrs >
          write(stdout, server, "[INFO] Created socket\n")
          acceptClient(S, server) .

    --- rl acceptClient(S, server) info(client(N), M, debugKill) => none .

    rl [new-client]:
       < server : Server | tick : N, Attrs >
       acceptedClient(server, S, Addr, C)
       => acceptClient(S, server)
          < client(N) : Client | socket : C, data : "", msgQueue : nq, status : idle >
          < server : Server | tick : s(N), Attrs >
          receive(C, client(N))
          write(stdout, server, "[INFO] New client " + string(N, 10) + " from " + Addr + "\n") .

    rl < client(N) : Client | socket : C, data : Data, Attrs >
        received(client(N), C, NewData)
        => < client(N) : Client | socket : C, data : (Data + NewData), Attrs >
           receive(C, client(N)) .
           --- write(stdout, server, "[INFO] Got new data from client " + string(N, 10) + ": \"" + NewData + "\"\n") .

    crl [parse-data]:
        < client(N) : Client | socket : C, data : Data, Attrs >
        < server : Server | tick : M, Attrs2 >
        => < client(N) : Client | socket : C, data : NewData, Attrs >
           < server : Server | tick : s(M), Attrs2 >
           info(client(N), M, I:Info)
           write(stdout, server, "[DEBUG] Client " + string(N, 10) + " parsed data: " + printTokens(metaPrettyPrint(['CLIENT-INFO], upTerm(I:Info))) + "\n")
        if [ I:Info, NewData ] := parseInfo(Data) .

    rl [connect-client-account]:
        < client(N) : Client | socket : C, Attrs1 >
        < client(M) : Client | account : account(M, Name), status : Stat, Attrs2 >
        < server : Server | accounts : (account(M, Name) ; Accs), Attrs >
        info(client(N), Tick, account(Name))
        => < client(N) : Client | socket : C, account : account(N, Name), status : idle, Attrs2 >
           < server : Server | accounts : (account(N, Name) ; Accs), Attrs > .

    crl [new-client-account]:
        < client(N) : Client | socket : C, msgQueue : Ns, Attrs1 >
        < server : Server | accounts : Accs, msgQueue : Ms, Attrs >
        info(client(N), M, account(Name))
        => < client(N) : Client | socket : C, account : account(N, Name), msgQueue : (Ns . Ms), Attrs1 >
           < server : Server | accounts : (account(N, Name) ; Accs), msgQueue : Ms, Attrs >
        if newAccount(Name, Accs) .

    op newAccount : String Infos -> Bool .
    eq newAccount(Name, account(M, Name) ; Accs) = false .
    eq newAccount(Name, Accs) = true [owise] .

    -----------------------------------------------------------------------------------------
    --- Saving to database
    -----------------------------------------------------------------------------------------
    rl [save]:
        < server : Server | tick : Tick, Attrs >
        info(client(N), M, save)
        => < server : Server | tick : s(Tick), Attrs >
           < db(Tick) : Database | serverState : < server : Server | tick : Tick, Attrs > >
           openFile(fileManager, db(Tick), "db.txt", "w") .

    rl [save-to-db]:
        < db(Tick) : Database | serverState : < server : Server | Attrs > >
        openedFile(db(Tick), fileManager, File)
        => < db(Tick) : Database | serverState : < server : Server | Attrs > >
           write(File, db(Tick), printTokens(metaPrettyPrint(['MESSAGING], upTerm(< server : Server | Attrs >))) + "\n") .

    rl [close-database]:
        wrote(db(Tick), File)
        => closeFile(File, db(Tick)) .

    rl [done-database]:
        < db(Tick) : Database | serverState : < server : Server | Attrs > >
        closedFile(db(Tick), File)
        => none .

    rl [send-message]:
        < server : Server | messages : Ms1, msgQueue : Ms, accounts : Accs, Attrs >
        < client(N) : Client | account : Acc, Attrs2 >
        info(client(N), M, text(Time, Text))
        => < server : Server | messages : (Ms1 ; message(Acc, M, text(Time, Text))), msgQueue : (Ms . M), accounts : Accs, Attrs >
           < client(N) : Client | account : Acc, Attrs2 >
           enqueueMessage(Accs, M) .

    rl [reply-message]:
        < server : Server | messages : Ms1, msgQueue : Ms, accounts : Accs, Attrs >
        < client(N) : Client | account : Acc, Attrs2 >
        info(client(N), M, replyTo(Id, Time, Text))
        => < server : Server | messages : (Ms1 ; message(Acc, M, replyTo(Id, Time, Text))), msgQueue : (Ms . M), accounts : Accs, Attrs >
           < client(N) : Client | account : Acc, Attrs2 >
           enqueueMessage(Accs, M) .

    op enqueueMessage : Infos Nat -> Msg [ctor] .
    rl [done-enqueue]: enqueueMessage(mt, M) => none .
    rl [enqueue-message] :
        < client(N) : Client | msgQueue : Ms, Attrs >
        enqueueMessage(account(N, Name) ; Accs, M)
        =>
        < client(N) : Client | msgQueue : (Ms . M), Attrs >
        enqueueMessage(Accs, M) .

    op formatMessage : Message -> String .
    eq formatMessage(message(account(N, Name), M, text(Time, Text))) =
        "text(" + string(Time, 10) + ",\\\"" + escape(escape(Name + ": " + Text), "\\") + "\\\")" .
    eq formatMessage(message(account(N, Name), M, thread(Parent, Time, Text))) =
        "thread(" + formatMessage(message(account(N, Name), M, Parent)) + "," + string(Time, 10) + ",\\\"" + escape(escape(Name + ": " + Text), "\\") + "\\\")" .

    op buildMessage : Infos Info -> Info .
    eq buildMessage(Ms1, text(Time, Text)) = text(Time, Text) .
    eq buildMessage((message(Acc, Id, MsgInfo) ; Ms1), replyTo(Id, Time, Text)) =
        thread(buildMessage(Ms1, MsgInfo), Time, Text) .

    rl [request-all-messages]:
        < client(N) : Client | msgQueue : Ms, Attrs  >
        < server : Server | msgQueue : Ns, Attrs2 >
        info(client(N), M, allMessages)
        => < client(N) : Client | msgQueue : (Ms . Ns), Attrs >
           < server : Server | msgQueue : Ns, Attrs2 > .

    rl [receive-message]:
        < client(N) : Client | account : Acc, socket : C, msgQueue : (M . Ms), status : idle, Attrs  >
        < server : Server | messages : (Ms1 ; message(Sender:Info, M, MsgInfo)), Attrs2 >
       => < server : Server | messages : (Ms1 ; message(Sender:Info, M, MsgInfo)), Attrs2 >
           if not fromMe(Acc, Sender:Info) then
            < client(N) : Client | account : Acc, socket : C, msgQueue : (M . Ms), status : receiving, Attrs >
            send(C, client(N), "\"" + formatMessage(message(Sender:Info, M, buildMessage(Ms1, MsgInfo))) + "\"\n")
            write(stdout, server, "[DEBUG] Sending message (id: " + string(M, 10) + ") to client " + string(N, 10) + ": " + "\"" + formatMessage(message(Sender:Info, M, buildMessage(Ms1, MsgInfo))) + "\"\n")
           else
            < client(N) : Client | account : Acc, socket : C, msgQueue : Ms, status : idle, Attrs  >
           fi .

    op fromMe : Info Info -> Bool .
    eq fromMe(account(N, Name), account(M, Name)) = true .
    eq fromMe(Acc1, Acc2) = false [owise] .

    rl < client(N) : Client | socket : C, status : receiving, msgQueue : (M . Ms), Attrs >
       sent(client(N), C)
       =>  < client(N) : Client | socket : C, status : idle, msgQueue : Ms, Attrs > .

    rl [client-disconnect]:
        < client(N) : Client | socket : C, Attrs >
        closedSocket(client(N), C, Data)
        => < client(N) : Client | Attrs >
           write(stdout, server, "[INFO] Client " + string(N, 10) + " quit, reason: '" + Data + "'\n") .

    rl wrote(server, stdout) => none .
endm

erew startServer(8080, 5) .

